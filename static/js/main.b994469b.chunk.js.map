{"version":3,"sources":["components/Jumbotron.js","components/Card.js","components/Gameboard.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","React","Component","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnClick","hasMatched","compareAndUpdate","state","key","value","index","onClick","isFlip","src","imgSrc","alt","Gameboard","waitAndFlip","cardKey1","cardKey2","setTimeout","console","log","newCardArray","cards","slice","setState","newCardKey","newCardValue","prevCardKey","prevCardValue","updateStates","isMatch","flipCard","card","score","cardData","sort","Math","random","newCards","cardKey","cardValue","_this2","map","components_Card","App","components_Jumbotron","components_Gameboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b994469b.chunk.js","sourcesContent":["import React from \"react\"\n\nclass Jumbotron extends React.Component {\n    render() {\n        return(\n            <div className=\"jumbotron\">\n                <h1>\n                    Memory Game\n                </h1>\n                <span>\n                    Rules:\n                </span>\n                <p>\n                    Try to find all the pairs.\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron;","import React from \"react\"\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            key:props.index,\n            value:props.value,\n        }\n    }\n\n    handleOnClick = () => {\n        if(!this.props.hasMatched) {\n            this.props.compareAndUpdate(this.state.key,this.state.value)\n        }\n    }\n\n\n    render() {\n        return(\n            <div className=\"playCard\" onClick={this.handleOnClick}>\n                {\n                    this.props.isFlip \n                        ? <img className=\"img-fluid\" src={this.props.imgSrc} alt=\"cardimage\"/>\n                        : <i className=\"fas fa-10x fa-question\"></i>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React from \"react\"\nimport Card from \"./Card\"\nimport cardData from \"../data/cardData.json\"\n\n\nclass Gameboard extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            score: 0,\n            cards: cardData.sort(() => Math.random() - 0.5),\n            prevCardValue: 0,\n            prevCardKey: -1\n        }\n    }\n\n    waitAndFlip = (cardKey1,cardKey2) => {\n        setTimeout(()=>{\n            console.log(\"It lauch\")\n            const newCardArray = this.state.cards.slice()\n            newCardArray[cardKey1].isFlip = false\n            newCardArray[cardKey2].isFlip = false\n            this.setState({\n                cards: newCardArray\n            })\n        },750)\n    }\n\n    updateStates(newCards,cardKey,cardValue) { // pass -1 for cardKey & 0 for cardValue to reset\n        this.setState({\n            cards: newCards,\n            prevCardKey: cardKey,\n            prevCardValue: cardValue\n        })\n    }\n\n    compareAndUpdate = (newCardKey,newCardValue) => {\n        if (this.state.prevCardKey === -1 && this.state.prevCardValue === 0) { //clicked first card\n            let newCardArray = this.state.cards.slice()\n            newCardArray[newCardKey].isFlip = true\n            this.updateStates(newCardArray,newCardKey,newCardValue)\n        } else { //clicked second card\n            if(this.state.prevCardKey === newCardKey) { //clicked same card\n                let newCardArray = this.state.cards.slice()\n                newCardArray[newCardKey].isFlip = false //flip it back\n                this.updateStates(newCardArray,-1,0) //reset prevCardKey and prevCardValue\n            } else { //clicked different card\n                //compare\n                if(this.state.prevCardValue === newCardValue) {\n                    const newCardArray = this.state.cards.slice()\n                    newCardArray[newCardKey].isFlip = true             //flip new card\n                    newCardArray[newCardKey].isMatch = true            //mark new card as matched\n                    newCardArray[this.state.prevCardKey].isMatch = true //mark prev card as matched\n                    this.updateStates(newCardArray,-1,0)               //update card array & reset prev values\n                } else {\n                    const newCardArray = this.state.cards.slice()\n                    newCardArray[newCardKey].isFlip = true //flip new card\n                    this.waitAndFlip(newCardKey,this.state.prevCardKey) // call function that flip these back\n                    this.updateStates(newCardArray,-1,0)          //update card array & reset prev values\n                }\n            }\n        }\n    }\n\n    flipCard = (card)=>{\n        return card.isFlip ? false: true\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"board\">\n                    {\n                        this.state.cards.map(\n                            (card, index) => <Card key={index} index={index} value={card.value} imgSrc={card.imgSrc} compareAndUpdate={this.compareAndUpdate} isFlip={card.isFlip} isMatch={card.isMatch}/>\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Gameboard;\n","import React from \"react\";\r\nimport Jumbotron from \"./components/Jumbotron\"\r\nimport Gameboard from \"./components/Gameboard\"\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return ( \r\n            <div className='container'>\r\n                <Jumbotron/>\r\n                <Gameboard/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}